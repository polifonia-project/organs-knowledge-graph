PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX fx:   <http://sparql.xyz/facade-x/ns/>
PREFIX xyz:  <http://sparql.xyz/facade-x/data/>
PREFIX organs: <http://w3id.org/polifonia/resource/organs/>
PREFIX organ: <http://w3id.org/polifonia/ontology/organs/>
PREFIX core: <https://w3id.org/polifonia/ontology/core/>
PREFIX ins: <http://w3id.org/polifonia/ontology/instrument/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

construct {

    #################
    # Organ individual

    ?organ_iri a organ:Organ ;
        rdfs:label ?organ_name ; # string literal
        core:includesWhole ?organ_parthood_iri ;
        organ:hasOrganNumber ?organ_number . 

    # construct a parthood with location(s) and timeinterval(s) of the organ
    ?organ_parthood_iri a ins:InstrumentWhole ;
        core:hasTimedLocation ?blank_timedlocation .

    # blank node for the TimeLocation entity
    ?blank_timedlocation a core:TimedLocation ;
        core:hasLocation ?blank_location ; 
        core:hasTimeInterval ?blank_timeinterval .

    # blank node for the location entity
    ?blank_location a core:Location ; 
        #core:hasAddress ?location_address ; # string literal with formatted address
        core:hasAddress ?blank_address ;
        core:name ?location_name ; # string literal
        core:longitude ?location_longitude ; # float
        core:latitude ?location_latitude ; # float
        rdf:comment ?location_building_description . # string literal.

    ?blank_address a core:Address ;
        core:hasAddressComponent ?address_component ;
        core:hasCity ?city .

    # blank node for the timeinterval entity
    ?blank_timeinterval a core:TimeInterval ;
        rdfs:label ?start_time_label ;
        core:hasIntervalStartDate ?start_time .

}
WHERE {

    SERVICE <x-sparql-anything:> {

        fx:properties fx:location ?_filepath .

        ?base_root a fx:root ;
            ?organ_slot ?organ_base .

        ?organ_base xyz:label ?organ_name .
        OPTIONAL { ?organ_base xyz:organnumber ?organ_number . }

        # Extract organ identifier
        BIND(replace(str(?organ_slot), str(xyz:), "") AS ?organid)
        # Mint organ IRI
        BIND(IRI(replace(str(?organ_slot), str(xyz:), str(organs:))) AS ?organ_iri)
        # Mint organ parthood IRI
        BIND(IRI(CONCAT(STR( ?organ_iri ), "_parthood")) AS ?organ_parthood_iri)

        # Iterate over all timedlocations
        ?organ_base xyz:parthood ?parthood_base . #list of timedlocations
        ?parthood_base ?timedlocation_slot ?timedlocation . #each timedlocation

        # Extract identifier for timedlocation entity
        BIND(replace(str(?timedlocation_slot), str(rdf:), "") AS ?timed_location_slotid)

        # Create globally unique identifers for timedlocation, location, and timeinterval
        BIND(concat(?organid, ?timed_location_slotid, "base") AS ?blank_timedlocationid)
        BIND(concat(?organid, ?timed_location_slotid, "location") AS ?blank_locationid)
        BIND(concat(?organid, ?timed_location_slotid, "timeinterval") AS ?blank_timeintervalid)

        # Make the blind nodes
        BIND(fx:bnode(?blank_timedlocationid) as ?blank_timedlocation)
        BIND(fx:bnode(?blank_locationid) as ?blank_location)
        BIND(fx:bnode(?blank_timeintervalid) as ?blank_timeinterval)

        # Iterate over the location names
        ?timedlocation xyz:names ?names_base .
        ?names_base fx:anySlot ?location_name .

        # Add optional data
        OPTIONAL { ?timedlocation xyz:startTime ?start_time . }
        OPTIONAL { ?timedlocation xyz:startTimeLable ?start_time_label . }
        OPTIONAL { ?timedlocation xyz:address ?location_address . }
        OPTIONAL { ?timedlocation xyz:longitude ?location_longitude . }
        OPTIONAL { ?timedlocation xyz:latitude ?location_latitude . }
        OPTIONAL { ?timedlocation xyz:description ?location_building_description . }

        # #For testing
        # VALUES ?organ_iri {
        #     organs:Part14_000Hilversum
        #     organs:Part14_000Drachten
        # }
    }

}
