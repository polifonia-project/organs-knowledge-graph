PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX fx:   <http://sparql.xyz/facade-x/ns/>
PREFIX xyz:  <http://sparql.xyz/facade-x/data/>
PREFIX organs: <http://w3id.org/polifonia/resource/organs/>
PREFIX organ: <http://w3id.org/polifonia/ontology/organs/>
PREFIX core: <https://w3id.org/polifonia/ontology/core/>

construct {

    #################
    # Organ individual

    ?organ_iri a organ:Organ ;
        rdfs:label ?organ_name ; # string literal
        core:includesWhole ?organ_parthood_iri ;

    # construct a parthood with location(s) and timeinterval(s) of the organ
    ?organ_parthood_iri a ins:InstrumentWhole ;
        core:hasTimedLocation [
            core:hasLocation [
                core:hasAddress ?address ; # string literal with formatted address
                core:name ?name ; # string literal
                core:longitude ?longitude ; # float (?)
                core:latitude ?latitude ; # float (?)
                rdf:comment ?building_description . # string literal.
            ] ;
            core:hasTimeInterval [
                core:hasIntervalDate ?parthood_date_iri ;
            ]
        ]

    #Q What is ?parthood_date_iri? 

    ###################################
    ### Date for the parts.

    ?timed_location_iri [
        a core:TimedLocation ;
        core:hasTimeInterval [
            core:hasIntervalDate ?date_iri .
        ]
    ] .

    #Q What is ?date_iri

    ###################################
    ### BASIC TECHNICAL DATA

    # These data are only available for current situation

    OPTIONAL { ?organ_parthood_iri organ:hasWindPressure ?windpressure . } # string literal
    OPTIONAL { ?organ_parthood_iri organ:hasTemperament ?temperament . } # string literal
    OPTIONAL { ?organ_parthood_iri organ:hasPitch ?pitch . } # string literal

    ###################################
    ### DIVISIONS AND STOPS AND CONSOLE

    # Division
    ?organ_division_iri a organ:OrganDivision ;
        core:name ?division_name ; # string literal
        core:isClassifiedBy ?division_type_iri ; # (?)
        core:hasPart ?organ_division_stop_iri ;
        organ:hasKeyboard ?keyboard_iri ;
        core:hasTimedLocation ?timed_location_iri .

    OPTIONAL { ?organ_division_iri rdfs:comment ?division_footnote . } # string literal

    # Keyboard
    ?keyboard_iri a organ:OrganConsoleKeyboard ;
        core:name ?keyboard_name ; # string literal
        organ:hasRank ?keyboard_rank . # string literal. One of {'I', 'II', 'III', 'IV', 'P'}

    # Relation parthood - division
    ?organ_parthood_iri core:hasPart ?organ_division_iri ;

    # Console
    ?organ_parthood_iri core:hasPart [
        a organ:OrganConsole ;
        organ:hasKeyboard ?keyboard_iri ;
        core:isClassifiedBy ?keyboard_class_iri ;
        core:hasPart [
            a organ:OrganConsolePlayingAids ;
            core:value ?playing_ads . # string literal
        ] ;
        core:hasOrganConsoleLocation [
            a organ:OrganConsoleLocation ;
            core:value ?console_location . # string literal
        ] ;
        organ:hasKeyboardRanges ?keyboard_ranges ; # string literal
        core:hasTimedLocation ?timed_location_iri
    ] .

    # Stop
    ?organ_division_stop a organ:OrganDivisionStop ;
        core:hasName [
            core:name ?stop_name ; # string literal
            a core:Name .
        ]
        core:hasName ?disambiguated_name_iri ;
        organ:hasPartition ?stop_partition ; # string literal
        organ:hasDouble ?stop_double ; # string literal
        organ:hasOrder ?stop_order ; # string literal
        organ:hasSpecification ?stop_specification . # string literal

    OPTIONAL { ?organ_division_stop rdfs:comment ?stop_footnote ; } # string literal

    # Disambiguated Stopname
    ?disambiguated_name_iri a core:DisambiguatedName ;
        core:name ?stop_disambiguated_name . # string literal

    # Compound stop
    OPTIONAL {
    ?organ_division_stop core:hasPart [
            a organ:OrgandivisionStopRankRange ;
            organ:lowestKey ?division_lowest_key ; # string literal. E.g. 'C', 'f2'
            organ:hasFootHeight ?footheight . # string literal. E.g. '4', '2/3'
        ]
    }

    ###################################
    ### WIND SYSTEM

    ?organ_parthood_iri core:hasPart [
        a organ:OrganWindSystem ;
        core:value ?windsystem_description ; # string literal
        core:hasTimedLocation ?timed_location_iri .
    ]

    ###################################
    ### CASE

    ?organ_parthood_iri core:hasPart [
        a organ:OrganCase ;
        core:value ?case_description ; # string literal.
        core:hasTimedLocation ?timed_location_iri .
    ]

}
WHERE {

    SERVICE <x-sparql-anything:> {

        fx:properties fx:location "./output/base.json"  .
    
        ?base_root a fx:root ;
            ?organ_slot ?organ_base .

        ?organ_base xyz:name ?organ_name .

        BIND (IRI(replace(str(?organ_slot), str(xyz:), str(organs:))) AS ?organ_iri)

        # For testing
        VALUES ?organ_iri {
            #organs:Part01_005NIEUW
            organs:Part03_007HELMO
        }
    }

    SERVICE <x-sparql-anything:> {

        fx:properties fx:location "./output/history_base.json"  .
    
        ?deliveries_root a fx:root ;
            ?organ_slot ?organ .

    }

    SERVICE <x-sparql-anything:> {

        fx:properties fx:location "./output/history_projects.json"  .
    
        ?projects_root a fx:root ;
            ?organ_slot ?projects .


    }
}
